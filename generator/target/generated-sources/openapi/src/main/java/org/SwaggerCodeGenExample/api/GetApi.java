/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.SwaggerCodeGenExample.api;

import org.SwaggerCodeGenExample.model.UserDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-08T11:31:37.717123+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "get", description = "the get API")
@RequestMapping("${openapi.userServiceAPISpec.base-path:/api/v1/users}")
public interface GetApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /get : get user details
     * get user details
     *
     * @return Successfully fetched user details (status code 200)
     *         or Invalid Request (status code 400)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "getUser",
        summary = "get user details",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully fetched user details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Request"),
            @ApiResponse(responseCode = "404", description = "User not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/get",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserDto>> getUser(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"biswa\", \"lastName\" : \"biswal\", \"emailAddress\" : \"biswabiswal41@gmail.com\", \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /get/{id} : get user by id
     * get user by id
     *
     * @param id  (required)
     * @return Successfully fetched user details by id (status code 200)
     *         or Invalid Request (status code 400)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "getUserById",
        summary = "get user by id",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully fetched user details by id", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Request"),
            @ApiResponse(responseCode = "404", description = "User not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/get/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserDto> getUserById(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"biswa\", \"lastName\" : \"biswal\", \"emailAddress\" : \"biswabiswal41@gmail.com\", \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
